##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        config_gip_storm
#
# DESCRIPTION : This function configures the published information on a StoRM SE.
#
# AUTHORS :     grid-release@infn.it
#
# NOTES :
#
# YAIM MODULE:  yaim-storm
#
##############################################################################

function config_gip_storm_check () {

  requires $1 SITE_NAME STORM_BACKEND_HOST STORM_DEFAULT_ROOT STORM_FRONTEND_PATH \
              STORM_FRONTEND_PORT STORM_FRONTEND_PUBLIC_HOST \
              STORM_BACKEND_REST_SERVICES_PORT VOS STORM_STORAGEAREA_LIST \
              STORM_ENDPOINT_QUALITY_LEVEL STORM_ENDPOINT_CAPABILITY \
              STORM_INFO_OVERWRITE
  return $?
}

function config_gip_storm_setenv () {

  

  return 0
}


function is_vo_listed() {
  [[ $VOS =~ (^| )$1($| ) ]] && echo 1 || echo 0 ;
}

function add_unique(){
  LIST=$1
  for name in ${LIST} ; do
    if [ "$2" = "$name" ]
      then return 0 ;
    fi ;
  done
  echo "$2 ${LIST}"
  return 0
}

function get_storageareas_vos () {

  FUNC="get_storageareas_vos"
  SA_VOS=""

  yaimlog DEBUG "get_storageareas_vos: STORM_STORAGEAREA_LIST=${STORM_STORAGEAREA_LIST}"

  for SA in ${STORM_STORAGEAREA_LIST}; do

    yaimlog DEBUG "${FUNC}: current SA=${SA}"

    # Convert case
    SA_UPP=`echo ${SA} | tr '[:lower:]' '[:upper:]'`
    SA_LOW=`echo ${SA} | tr '[:upper:]' '[:lower:]'`
    # Remove DNS-like characters from SA_UPP names
    SA_UPP=`echo ${SA_UPP} | sed -e 's/-//g' -e 's/\.//g'`
    
    yaimlog DEBUG "${FUNC}: SA_LOW=${SA_LOW}"
    yaimlog DEBUG "${FUNC}: SA_UPP=${SA_UPP}"

    x=STORM_${SA_UPP}_VONAME;
    SA_VONAME=${!x:-${SA_LOW}}
    
    yaimlog DEBUG "${FUNC}: SA_VONAME=${SA_VONAME}"

    if [ $(is_vo_listed ${SA_VONAME}) -eq 1 ] && [ "${SA_VONAME}" != "*" ]; then
      
      SA_VOS=`add_unique ${SA_VOS} ${SA_VONAME}`
      yaimlog DEBUG "${FUNC}: SA_VOS=${SA_VOS}"
    
    fi ;
  done

  echo ${SA_VOS}
  return 0
}

function get_owner() {
  SA_LIST=$1
  OWNER=""
  for VO in ${SA_LIST}; do
    OWNER="${OWNER} echo ${VO};"
  done
  echo "${OWNER}"
  return 0
}

function get_acbr() {
  SA_LIST=$1
  ACBR=""
  for VO in ${SA_LIST}; do
    ACBR="${ACBR} echo VO:${VO};"
  done
  echo "${ACBR}"
  return 0
}

#
# Size
#
function get_size () {

  FUNC="get_size"

  if [ "$#" -ne "9" ]; then
    yaimlog ERROR "${FUNC}: Internal Error!"
    yaimlog ERROR "Please set: Verify the number of parameters passed to the ${FUNCTION} function"
    yestr ${YEX_SOFTWARE}
    yaimlog ERROR "${YERRORSTR}"
    return ${YEX_SOFTWARE}
  fi

  SIZE=`/usr/bin/curl -s http://$2:$3/info/status/$1`
  if [ -z "${SIZE}" ]; then
    # convert in byte (base 10)
    yaimlog DEBUG "${FUNC}: the command /usr/bin/curl -s http://$2:$3/info/status/$1 return no value; check StoRM Backend service status."
    yaimlog DEBUG "${FUNC}: set a temporary value."
    total=$(($4*(1000*1000*1000)))
    used=0
    reserved=0
    free=$(($4*(1000*1000*1000)))
    available=$(($4*(1000*1000*1000)))
  elif [ "${SIZE}" == "<html><body><h1>Internal Error</h1></body></html>" ]; then
    # convert in byte (base 10)
    yaimlog DEBUG "${FUNC}: the command /usr/bin/curl -s http://$2:$3/info/status/$1 return Internal Error; check StoRM Backend info service status."
    yaimlog DEBUG "${FUNC}: set a temporary value."
    total=$(($4*(1000*1000*1000)))
    used=0
    reserved=0
    free=$(($4*(1000*1000*1000)))
    available=$(($4*(1000*1000*1000)))
  else
    # # convert in byte (base 10)
    yaimlog DEBUG "SIZE=${SIZE}"

    used=        `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^used-space/ {print $2}'`
    free=        `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^free-space/ {print $2}'`
    reserved=    `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^reserved-space/ {print $2}'`
    total=       `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^total-space/ {print $2}'`
    available=   `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^available-space/ {print $2}'`
    busy=        `echo $SIZE | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^busy-space/ {print $2}'`
    
    if [ "${available}" -eq "0" ]; then
      available=$((${total} - ${busy}))
    fi
    
    yaimlog DEBUG "${FUNC}: TOTAL: ${total}; AVAILABLE: ${available}; USED: ${used}; FREE: ${free}; RESERVED: ${reserved}; BUSY: $busy"
    
    NSIZE=`/usr/libexec/storm-dynamic-info-provider/storm-base-ten-converter -u $used -f $free -r $reserved -t $total -a $available`
    
    yaimlog DEBUG "SIZE=${NSIZE}"

    used=       `echo $NSIZE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F': ' '/used-space/ {print $2}'`
    free=       `echo $NSIZE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F': ' '/free-space/ {print $2}'`
    reserved=   `echo $NSIZE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F': ' '/reserved-space/ {print $2}'`
    total=      `echo $NSIZE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F': ' '/total-space/ {print $2}'`
    available=  `echo $NSIZE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F': ' '/available-space/ {print $2}'`
    yaimlog DEBUG "${FUNC}: TOTAL: ${total}; AVAILABLE: ${available}; USED: ${used}; FREE: ${free}; RESERVED: ${reserved}"
  fi
  yaimlog DEBUG "${FUNC}: TOTAL: ${total}; AVAILABLE: ${available}; USED: ${used}; FREE: ${free}; RESERVED: ${reserved}"
  export $5=${total}
  export $6=${available}
  export $7=${used}
  export $8=${free}
  export $9=${reserved}

  return 0

}

function create_service_glue13_file() {
  
  cat > ${GLUE13_SERVICE_FILE} <<EOF
#!/bin/sh
# glue13 service file
# generated by yaim-storm on $(date -u)
. /etc/profile.d/grid-env.sh
${GLUE13_INFO_SERVICE} ${GLUE13_SERVICE_CONFIG_FILE} ${SITE_NAME} ${STORM_FRONTEND_ENDPOINT}
EOF

  # Set execute permissions
  chmod +x ${GLUE13_SERVICE_FILE}

  return 0
}

function create_service_glue2_file() {

  cat > ${GLUE2_SERVICE_FILE} <<EOF
#!/bin/sh
# glue2 service file
# generated by yaim-storm on $(date -u)
. /etc/profile.d/grid-env.sh
${GLUE2_INFO_SERVICE} ${GLUE2_SERVICE_CONFIG_FILE} ${SITE_NAME} ${STORM_FRONTEND_ENDPOINT}
EOF

  # Set execute permissions
  chmod +x ${GLUE2_SERVICE_FILE}

  return 0
}

function create_service_glue13_config_file() {

  FUNC="create_service_glue13_config_file"

  cat > ${GLUE13_SERVICE_CONFIG_FILE} <<EOF
# glue13 service configuration file 
# generated by yaim-storm on $(date)
init=/usr/libexec/storm-dynamic-info-provider/glite-info-service-storm init
service_type=SRM
get_version=echo \${GLITE_INFO_SERVICE_VERSION}
get_endpoint=echo \${GLITE_INFO_SERVICE_ENDPOINT}
WSDL_URL=http://sdm.lbl.gov/srm-wg/srm.v2.2.wsdl
semantics_URL=http://sdm.lbl.gov/srm-wg/doc/SRM.v2.2.html
get_starttime=perl -e '@st=stat("/var/run/storm-backend-server.pid");print "@st[10]\n";'
get_data=echo
get_services=echo
EOF

  OWNER=`get_owner "$1"`
  ACBR=`get_acbr "$1"`
  STATUS="${INFO_SERVICE_SCRIPT}/glite-info-service-test SRM_V2 && /usr/libexec/storm-dynamic-info-provider/glite-info-service-storm status"

  set_value "get_status" "${STATUS}" ${GLUE13_SERVICE_CONFIG_FILE}
  set_value "get_owner" "${OWNER}" ${GLUE13_SERVICE_CONFIG_FILE}
  set_value "get_acbr" "${ACBR}" ${GLUE13_SERVICE_CONFIG_FILE}

  chown ldap:ldap ${GLUE13_SERVICE_CONFIG_FILE}
  return 0
}

function create_service_glue2_config_file() {

  FUNC="create_service_glue2_config_file"

  cat > ${GLUE2_SERVICE_CONFIG_FILE} <<EOF
# glue2 service configuration file 
# generated by yaim-storm on $(date)
init=/usr/libexec/storm-dynamic-info-provider/glite-info-service-storm init
service_type=SRM
get_version=echo \${GLITE_INFO_SERVICE_VERSION}
get_endpoint=echo \${GLITE_INFO_SERVICE_ENDPOINT}
WSDL_URL=http://sdm.lbl.gov/srm-wg/srm.v2.2.wsdl
semantics_URL=http://sdm.lbl.gov/srm-wg/doc/SRM.v2.2.html
get_starttime=perl -e '@st=stat("/var/run/storm-backend-server.pid");print "@st[10]\n";'
get_implementor=echo emi
get_implementationname=echo StoRM
get_implementationversion=rpm -qa | grep storm-backend-server | cut -d- -f4
get_data=echo
get_services=echo
EOF

  OWNER=`get_owner "$1"`
  ACBR=`get_acbr "$1"`
  STATUS="${INFO_SERVICE_SCRIPT}/glite-info-service-test SRM_V2 && /usr/libexec/storm-dynamic-info-provider/glite-info-service-storm status"

  set_value "get_status" "${STATUS}" ${GLUE2_SERVICE_CONFIG_FILE}
  set_value "get_capabilities" "echo ${STORM_ENDPOINT_CAPABILITY}" ${GLUE2_SERVICE_CONFIG_FILE}
  set_value "get_qualitylevel" "echo ${STORM_ENDPOINT_QUALITY_LEVEL}" ${GLUE2_SERVICE_CONFIG_FILE}
  set_value "get_servingstate" "echo ${STORM_SERVING_STATE}" ${GLUE2_SERVICE_CONFIG_FILE}
  set_value "get_owner" "${OWNER}" ${GLUE2_SERVICE_CONFIG_FILE}
  set_value "get_acbr" "${ACBR}" ${GLUE2_SERVICE_CONFIG_FILE}

  chown ldap:ldap ${GLUE2_SERVICE_CONFIG_FILE}
  return 0
}

function config_gip_storm () {

  yaimgridenv_set INFO_SERVICE_CONFIG "/etc/glite/info/service"
  yaimgridenv_set INFO_SERVICE_SCRIPT "/usr/bin"
  yaimgridenv_set INFO_PROVIDER_PATH "/var/lib/bdii/gip/provider"
  yaimgridenv_set INFO_LDIF_PATH "/var/lib/bdii/gip/ldif"
  yaimgridenv_set INFO_PLUGIN_PATH "/var/lib/bdii/gip/plugin"  

  yaimgridenv_set GLUE13_INFO_SERVICE "${INFO_SERVICE_SCRIPT}/glite-info-service"
  yaimgridenv_set GLUE13_SERVICE_FILE "${INFO_PROVIDER_PATH}/service-srm-storm-v2"
  yaimgridenv_set GLUE13_SERVICE_CONFIG_FILE "${INFO_SERVICE_CONFIG}/glite-info-service-srm-storm-v2.conf"
  
  yaimgridenv_set GLUE2_INFO_SERVICE "${INFO_SERVICE_SCRIPT}/glite-info-glue2-simple"
  yaimgridenv_set GLUE2_SERVICE_FILE "${INFO_PROVIDER_PATH}/service-glue2-srm-storm-v2"
  yaimgridenv_set GLUE2_SERVICE_CONFIG_FILE "${INFO_SERVICE_CONFIG}/glite-info-service-glue2-srm-storm-v2.conf"

  yaimgridenv_set STORM_FRONTEND_ENDPOINT "httpg://${STORM_FRONTEND_PUBLIC_HOST}:${STORM_FRONTEND_PORT}${STORM_FRONTEND_PATH}"

  yaimgridenv_set STORM_SERVING_STATE 1
  yaimgridenv_set STORM_SERVING_STATE_VALUE closed

  yaimlog DEBUG "STORM_FRONTEND_ENDPOINT=${STORM_FRONTEND_ENDPOINT}"

  FUNCTION="config_gip_storm"
  SA_LIST=`get_storageareas_vos`

  yaimlog DEBUG "${FUNCTION}: Changing ownership for ${INFO_SERVICE_CONFIG} directory .." 
  chown ldap:root ${INFO_SERVICE_CONFIG}

  # GLUE 1.3 static service information
  
  yaimlog INFO "${FUNCTION}: Static GLUE 1.3 service information initialization "
  
  yaimlog INFO "${FUNCTION}: Creating ${GLUE13_SERVICE_FILE} ..."
  create_service_glue13_file
  yaimlog INFO "${FUNCTION}: Successfully created ${GLUE13_SERVICE_FILE} !"
  
  yaimlog INFO "${FUNCTION}: Creating ${GLUE13_SERVICE_CONFIG_FILE} ..."
  create_service_glue13_config_file "${SA_LIST}"
  yaimlog INFO "${FUNCTION}: Successfully created ${GLUE13_SERVICE_CONFIG_FILE} !"

  # GLUE 2 static service information
  
  yaimlog INFO "${FUNCTION}: Static GLUE 2 service information initialization "

  yaimlog INFO "${FUNCTION}: Creating ${GLUE2_SERVICE_FILE} ..."
  create_service_glue2_file
  yaimlog INFO "${FUNCTION}: Successfully created ${GLUE2_SERVICE_FILE} !"

  yaimlog INFO "${FUNCTION}: Creating ${GLUE2_SERVICE_CONFIG_FILE} ..."
  create_service_glue2_config_file "${SA_LIST}"
  yaimlog INFO "${FUNCTION}: Successfully created ${GLUE2_SERVICE_CONFIG_FILE} !"

}